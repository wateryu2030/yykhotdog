import React, { useState, useEffect, useRef } from 'react';
import { Input, AutoComplete, Card, List, Typography, Tag, Space, Button, Tooltip } from 'antd';
import { SearchOutlined, HistoryOutlined, StarOutlined, ClockCircleOutlined } from '@ant-design/icons';
import axios from 'axios';

const { Text } = Typography;

interface SearchResult {
  id: string;
  title: string;
  type: 'customer' | 'order' | 'product' | 'store' | 'city';
  description: string;
  value: string;
  tags?: string[];
  score?: number;
}

interface SearchSuggestion {
  text: string;
  type: 'recent' | 'popular' | 'suggestion';
  count?: number;
}

interface SmartSearchProps {
  onResultSelect?: (result: SearchResult) => void;
  placeholder?: string;
  style?: React.CSSProperties;
}

const SmartSearch: React.FC<SmartSearchProps> = ({ 
  onResultSelect, 
  placeholder = "ÊêúÁ¥¢ÂÆ¢Êà∑„ÄÅËÆ¢Âçï„ÄÅ‰∫ßÂìÅ...",
  style 
}) => {
  const [searchValue, setSearchValue] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const searchTimeoutRef = useRef<NodeJS.Timeout>();

  // Ê®°ÊãüÊêúÁ¥¢Âª∫ËÆÆÊï∞ÊçÆ
  const mockSuggestions: SearchSuggestion[] = [
    { text: 'ÂÆ¢Êà∑C001', type: 'recent' },
    { text: 'ÁÉ≠ÁãóÂ•óÈ§ê', type: 'recent' },
    { text: 'Ê≤àÈò≥Â∏Ç', type: 'recent' },
    { text: 'ËÆ¢Âçï2025', type: 'popular', count: 156 },
    { text: 'Ê†∏ÂøÉÂÆ¢Êà∑', type: 'popular', count: 89 },
    { text: 'ÈîÄÂîÆÂàÜÊûê', type: 'suggestion' },
    { text: 'Â∫ìÂ≠òÁÆ°ÁêÜ', type: 'suggestion' },
  ];

  // Ê®°ÊãüÊêúÁ¥¢ÁªìÊûúÊï∞ÊçÆ
  const mockSearchResults: SearchResult[] = [
    {
      id: '1',
      title: 'ÂÆ¢Êà∑C001 - Âº†‰∏â',
      type: 'customer',
      description: 'Ê†∏ÂøÉÂÆ¢Êà∑ÔºåÁ¥ØËÆ°Ê∂àË¥π¬•2,580',
      value: 'C001',
      tags: ['Ê†∏ÂøÉÂÆ¢Êà∑', 'È´ò‰ª∑ÂÄº'],
      score: 0.95
    },
    {
      id: '2',
      title: 'ËÆ¢ÂçïORD20251026001',
      type: 'order',
      description: '2025-10-26 14:30ÔºåÈáëÈ¢ù¬•58.00',
      value: 'ORD20251026001',
      tags: ['Â∑≤ÂÆåÊàê', 'ÁÉ≠ÁãóÂ•óÈ§ê'],
      score: 0.88
    },
    {
      id: '3',
      title: 'ÁÉ≠ÁãóÂ•óÈ§ê',
      type: 'product',
      description: 'ÁªèÂÖ∏ÁÉ≠Áãó+ËñØÊù°+È•ÆÊñôÔºå‰ª∑Ê†º¬•28',
      value: 'ÁÉ≠ÁãóÂ•óÈ§ê',
      tags: ['ÁÉ≠ÈîÄ', 'Â•óÈ§ê'],
      score: 0.82
    },
    {
      id: '4',
      title: 'Ê≤àÈò≥Â∏ÇÂíåÂπ≥Â∫ó',
      type: 'store',
      description: 'Ê≤àÈò≥Â∏ÇÂíåÂπ≥Âå∫Ôºå‰ªäÊó•ÈîÄÂîÆÈ¢ù¬•1,280',
      value: 'Ê≤àÈò≥Â∏ÇÂíåÂπ≥Â∫ó',
      tags: ['Ëê•‰∏ö‰∏≠', 'È´òÈîÄÈáè'],
      score: 0.79
    },
    {
      id: '5',
      title: 'Ê≤àÈò≥Â∏Ç',
      type: 'city',
      description: 'ËæΩÂÆÅÁúÅÊ≤àÈò≥Â∏ÇÔºå19ÂÆ∂Èó®Â∫óÔºåÊÄªÈîÄÂîÆÈ¢ù¬•15,680',
      value: 'Ê≤àÈò≥Â∏Ç',
      tags: ['ËæΩÂÆÅÁúÅ', '19ÂÆ∂Èó®Â∫ó'],
      score: 0.75
    }
  ];

  useEffect(() => {
    // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩÊúÄËøëÊêúÁ¥¢
    const saved = localStorage.getItem('recentSearches');
    if (saved) {
      setRecentSearches(JSON.parse(saved));
    }
  }, []);

  // Â§ÑÁêÜÊêúÁ¥¢ËæìÂÖ•
  const handleSearch = async (value: string) => {
    setSearchValue(value);
    
    if (!value.trim()) {
      setSearchResults([]);
      setShowSuggestions(true);
      return;
    }

    // Ê∏ÖÈô§‰πãÂâçÁöÑÂÆöÊó∂Âô®
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // ËÆæÁΩÆÊñ∞ÁöÑÂÆöÊó∂Âô®ÔºåÂª∂ËøüÊêúÁ¥¢
    searchTimeoutRef.current = setTimeout(async () => {
      setIsLoading(true);
      
      try {
        // Ê®°ÊãüAPIË∞ÉÁî®
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // ËøáÊª§ÊêúÁ¥¢ÁªìÊûú
        const filteredResults = mockSearchResults.filter(result =>
          result.title.toLowerCase().includes(value.toLowerCase()) ||
          result.description.toLowerCase().includes(value.toLowerCase()) ||
          result.value.toLowerCase().includes(value.toLowerCase())
        );

        setSearchResults(filteredResults);
        setShowSuggestions(false);
        
        // ‰øùÂ≠òÂà∞ÊúÄËøëÊêúÁ¥¢
        if (value.trim() && !recentSearches.includes(value.trim())) {
          const newRecentSearches = [value.trim(), ...recentSearches.slice(0, 4)];
          setRecentSearches(newRecentSearches);
          localStorage.setItem('recentSearches', JSON.stringify(newRecentSearches));
        }
        
      } catch (error) {
        console.error('ÊêúÁ¥¢Â§±Ë¥•:', error);
      } finally {
        setIsLoading(false);
      }
    }, 300);
  };

  // Â§ÑÁêÜÁªìÊûúÈÄâÊã©
  const handleResultSelect = (result: SearchResult) => {
    if (onResultSelect) {
      onResultSelect(result);
    }
    setSearchValue(result.title);
    setSearchResults([]);
    setShowSuggestions(false);
  };

  // Â§ÑÁêÜÂª∫ËÆÆÈÄâÊã©
  const handleSuggestionSelect = (suggestion: SearchSuggestion) => {
    setSearchValue(suggestion.text);
    handleSearch(suggestion.text);
  };

  // Ê∏ÖÈô§ÊêúÁ¥¢
  const handleClear = () => {
    setSearchValue('');
    setSearchResults([]);
    setShowSuggestions(false);
  };

  // Ëé∑ÂèñÁ±ªÂûãÂõæÊ†á
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'customer': return 'üë§';
      case 'order': return 'üìã';
      case 'product': return 'üçî';
      case 'store': return 'üè™';
      case 'city': return 'üèôÔ∏è';
      default: return 'üìÑ';
    }
  };

  // Ëé∑ÂèñÁ±ªÂûãÈ¢úËâ≤
  const getTypeColor = (type: string) => {
    switch (type) {
      case 'customer': return 'blue';
      case 'order': return 'green';
      case 'product': return 'orange';
      case 'store': return 'purple';
      case 'city': return 'cyan';
      default: return 'default';
    }
  };

  return (
    <div style={{ position: 'relative', ...style }}>
      <AutoComplete
        value={searchValue}
        onChange={handleSearch}
        onSearch={handleSearch}
        placeholder={placeholder}
        style={{ width: '100%' }}
        options={[]}
        onFocus={() => setShowSuggestions(true)}
        onBlur={() => {
          // Âª∂ËøüÈöêËóèÂª∫ËÆÆÔºåÂÖÅËÆ∏ÁÇπÂáª
          setTimeout(() => setShowSuggestions(false), 200);
        }}
      >
        <Input
          size="large"
          prefix={<SearchOutlined />}
          suffix={
            searchValue && (
              <Button 
                type="text" 
                size="small" 
                onClick={handleClear}
                style={{ padding: 0 }}
              >
                ‚úï
              </Button>
            )
          }
          // loading={isLoading}
        />
      </AutoComplete>

      {/* ÊêúÁ¥¢ÁªìÊûú‰∏ãÊãâÊ°Ü */}
      {searchResults.length > 0 && (
        <Card
          style={{
            position: 'absolute',
            top: '100%',
            left: 0,
            right: 0,
            zIndex: 1000,
            marginTop: 4,
            maxHeight: 400,
            overflow: 'auto'
          }}
          bodyStyle={{ padding: 0 }}
        >
          <List
            dataSource={searchResults}
            renderItem={(result) => (
              <List.Item
                style={{ 
                  padding: '12px 16px',
                  cursor: 'pointer',
                  borderBottom: '1px solid #f0f0f0'
                }}
                onClick={() => handleResultSelect(result)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#f5f5f5';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = 'transparent';
                }}
              >
                <List.Item.Meta
                  avatar={
                    <span style={{ fontSize: '20px' }}>
                      {getTypeIcon(result.type)}
                    </span>
                  }
                  title={
                    <Space>
                      <Text strong>{result.title}</Text>
                      <Tag color={getTypeColor(result.type)}>
                        {result.type}
                      </Tag>
                      {result.score && (
                        <Tag color="gold">
                          {Math.round(result.score * 100)}%
                        </Tag>
                      )}
                    </Space>
                  }
                  description={
                    <Space direction="vertical" size={0}>
                      <Text type="secondary">{result.description}</Text>
                      {result.tags && (
                        <Space size={4}>
                          {result.tags.map((tag, index) => (
                            <Tag key={index} color="blue">
                              {tag}
                            </Tag>
                          ))}
                        </Space>
                      )}
                    </Space>
                  }
                />
              </List.Item>
            )}
          />
        </Card>
      )}

      {/* ÊêúÁ¥¢Âª∫ËÆÆ‰∏ãÊãâÊ°Ü */}
      {showSuggestions && searchResults.length === 0 && (
        <Card
          style={{
            position: 'absolute',
            top: '100%',
            left: 0,
            right: 0,
            zIndex: 1000,
            marginTop: 4,
            maxHeight: 300,
            overflow: 'auto'
          }}
          bodyStyle={{ padding: 0 }}
        >
          <List
            dataSource={mockSuggestions}
            renderItem={(suggestion) => (
              <List.Item
                style={{ 
                  padding: '8px 16px',
                  cursor: 'pointer',
                  borderBottom: '1px solid #f0f0f0'
                }}
                onClick={() => handleSuggestionSelect(suggestion)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#f5f5f5';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = 'transparent';
                }}
              >
                <List.Item.Meta
                  avatar={
                    suggestion.type === 'recent' ? <HistoryOutlined /> :
                    suggestion.type === 'popular' ? <StarOutlined /> :
                    <ClockCircleOutlined />
                  }
                  title={
                    <Space>
                      <Text>{suggestion.text}</Text>
                      {suggestion.count && (
                        <Tag color="green">
                          {suggestion.count}
                        </Tag>
                      )}
                    </Space>
                  }
                  description={
                    suggestion.type === 'recent' ? 'ÊúÄËøëÊêúÁ¥¢' :
                    suggestion.type === 'popular' ? 'ÁÉ≠Èó®ÊêúÁ¥¢' :
                    'ÊêúÁ¥¢Âª∫ËÆÆ'
                  }
                />
              </List.Item>
            )}
          />
        </Card>
      )}
    </div>
  );
};

export default SmartSearch;
